#!/usr/bin/env python
import struct
import SocketServer
from base64 import b64encode
from hashlib import sha1
from mimetools import Message
from StringIO import StringIO
import threading
import time
import sys
import socket
import errno
import argparse

listeners={}
 
class WebSocketsHandler(SocketServer.StreamRequestHandler):
    magic = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
    isopen=False
    def setup(self):
        SocketServer.StreamRequestHandler.setup(self)
        #print "connection established", self.client_address
        self.isopen=True
        self.handshake_done = False
        listeners[self.client_address]=self
 
    def handle(self):
        while self.isopen:
            if not self.handshake_done:
                self.handshake()
            else:
                self.read_next_message()
 
    def read_next_message(self):
        raw=self.rfile.read(2)
        #print ":".join("{:02x}".format(ord(c)) for c in raw)#see what precisely is sent in full
        if raw:
            length = ord(raw[1]) & 127

            if length == 126:
                length = struct.unpack(">H", self.rfile.read(2))[0]
            elif length == 127:
                length = struct.unpack(">Q", self.rfile.read(8))[0]
            masks = [ord(byte) for byte in self.rfile.read(4)]
            decoded = ""
            for char in self.rfile.read(length):
                decoded += chr(ord(char) ^ masks[len(decoded) % 4])
        else:
            self.stop()
 
    def send_message(self, message):
        try:
            self.request.send(chr(129))
            length = len(message)
            if length <= 125:
                self.request.send(chr(length))
            elif length >= 126 and length <= 65535:
                self.request.send(chr(126))
                self.request.send(struct.pack(">H", length))
            else:
                self.request.send(chr(127))
                self.request.send(struct.pack(">Q", length))
            self.request.send(message)
        except socket.error as e:
            #we can't send data, might as well stop handling ourselves
            self.isopen=False
            pass
 
    def handshake(self):
        data = self.request.recv(1024).strip()
        headers = Message(StringIO(data.split('\r\n', 1)[1]))
        if headers.get("Upgrade", None) != "websocket":
            return
        #print 'Handshaking...'
        key = headers['Sec-WebSocket-Key']
        digest = b64encode(sha1(key + self.magic).hexdigest().decode('hex'))
        response = 'HTTP/1.1 101 Switching Protocols\r\n'
        response += 'Upgrade: websocket\r\n'
        response += 'Connection: Upgrade\r\n'
        response += 'Sec-WebSocket-Accept: %s\r\n\r\n' % digest
        self.handshake_done = self.request.send(response)
 
    def on_message(self, message):
        print message
        #stuff we get back from the other end of the socket, not expecting much in this context

    def stop(self):
        self.isopen=False
        #print "finishing",self.client_address
 
class ThreadedServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    allow_reuse_address = True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Stream standard input to web socket clients')
    parser.add_argument('--port', default=9999, help='the port to listen on, default 9999')
    parser.add_argument('--bind', default='', help='The ip address to listen on, e.g. localhost for no external access, by default it listens on all interfaces')
    args = parser.parse_args()

    server = ThreadedServer((args.bind, args.port), WebSocketsHandler)
    server_thread = threading.Thread(target=server.serve_forever)
    # Exit the server thread when the main thread terminates
    server_thread.daemon = True
    server_thread.start()
    #print "Server loop running in thread:", server_thread.name
    try:
        while True:
            line = sys.stdin.readline()
            if not line: break # EOF
            #having read a line in we now send it out to all our listeners
            #sys.stdout.write('> ' + line.upper())#just output to the console and uppercase to prove it isn't an echo
            for l in listeners:
                listeners[l].send_message(line)
    except:
        pass
    #being here means we have an EOF
    #tear down the server
    #sys.stdout.write("EOF Shutting down\n")
    for l in listeners:
        try:
            listeners[l].send_message("EOF")
            listeners[l].request.shutdown(1)
        except:
            pass
    server.shutdown()
